import time, net, util;

!<<

import (
    "encoding/json"
)

!>>

void log(String msg)
{
    println("[%s] %s".(time.format_time("2006-01-02 15:04:05", time.time()), msg));
}

void work(net.TcpConn conn)
{
    defer conn.close();

    log("start calc");

    var req = new util.Vector<char>(nil);
    for (;;)
    {
        var buf = new char[10000];
        long sz = conn.read(buf);
        if (sz == 0)
        {
            break;
        }
        req.extend(buf[: sz].iter());
    }
    var req_arr = req.to_array();

    long board_size = 0;
    !<<
    var board [][]uint8
    err := json.Unmarshal(l_req_arr.arr, &board)
    if err == nil {
        l_board_size = int64(len(board))
    }
    !>>

    if (board_size <= 0)
    {
        log("invalid req");
        return;
    }

    var board = new char[board_size][board_size];
    for (long i = 0; i < board_size; ++ i)
    {
        var row = board[i];
        bool ok = false;
        !<<
        if int64(copy(l_row.arr, board[l_i])) == l_board_size {
            l_ok = true;
        }
        !>>
        if (!ok)
        {
            log("invalid req");
            return;
        }
    }

    long row, col;
    ai_choice(board, ref row, ref col);

    log("(%c,%c)".("ABCDEFGHIJKLMNOPQRSTUVWXYZ".char_at(row), "abcdefghijklmnopqrstuvwxyz".char_at(col)));
    conn.write("[%s, %s]".(row, col).to_char_array());
}

public void main()
{
    net.TcpListener listener = new net.TcpListener(":9999");
    defer listener.close();

    log("server start");
    while (true)
    {
        work(listener.accept());
    }
}
