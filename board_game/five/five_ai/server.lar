import time, net, util;

void log(String msg)
{
    println("[%s] %s".(time.format_time("2006-01-02 15:04:05", time.time()), msg));
}

class InvalidReq
{
    EmptyException e usemethod;
}

void work(net.TcpConn conn)
{
    defer conn.close();

    var start_time = time.time();

    defer handle_exc([]{
        public void handle(Catched<InvalidReq> c)
        {
            if (c !== nil)
            {
                log("invalid req");
                log(c.traceback());
            }
            else
            {
                log("time cost: %.2f sec".(time.time() - start_time));
            }
        }
    });

    log("start calc");

    //请求协议：竖线分隔棋盘的行，每行是逗号分隔，每个点的状态：0 空白；1 黑棋；2 白棋

    var req = new util.Vector<char>(nil);
    for (;;)
    {
        var buf = new char[10000];
        long sz = conn.read(buf);
        if (sz == 0)
        {
            break;
        }
        req.extend(buf[: sz].iter());
    }
    var req_rows = new String(req.to_array()).split("|");
    long board_size = req_rows.size();

    //特殊规定：棋盘至少要比ai的特征长度大，不然没法分析了
    if (board_size <= cast<long>(FEATURE_LEN))
    {
        throw(new InvalidReq());
    }

    var board = new char[board_size][];
    for (long i = 0; i < board_size; ++ i)
    {
        var req_row = req_rows[i].split(",");
        if (req_row.size() != board_size)
        {
            throw(new InvalidReq());
        }
        var row = new char[board_size];
        for (long j = 0; j < board_size; ++ j)
        {
            long cell_stat = req_row[j].parse_long(0);
            if (cell_stat != 0 && cell_stat != 1 && cell_stat != 2)
            {
                throw(new InvalidReq());
            }
            row[j] = cast<char>(cell_stat);
        }
        board[i] = row;
    }

    var pos = ai_choice(board);

    //回复协议：逗号分隔的x,y坐标
    log("%s".(pos));
    conn.write("%s,%s".(pos.row, pos.col).to_char_array());
}

public void main()
{
    net.TcpListener listener = new net.TcpListener(":9999");
    defer listener.close();

    log("start");

    init_ai_model();
    log("ai model inited");

    log("server start");
    while (true)
    {
        work(listener.accept());
    }
}
