import util;

//feature按每2bit表示一个位置状态，例如“oo x o”表示为0b101000010010
final uint FEATURE_LEN = 6;

uint feature_stat(uint f, uint i)
{
    assert(i < FEATURE_LEN, "bug");
    return (f >> (i * 2)) & 0b11;
}

void set_feature_stat(ref uint f, uint i, uint stat)
{
    assert(feature_stat(f, i) == 0 && stat <= 2, "bug");
    f |= stat << (i * 2);
}

bool std_feature(ref uint f)
{
    uint rf = 0;
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        var stat = feature_stat(f, i);
        if (stat == 3)
        {
            return false;
        }
        set_feature_stat(ref rf, FEATURE_LEN - 1 - i, stat);
    }
    f = util.min(f, rf);
    return true;
}

//反转feature的双方棋子
uint rev_feature(uint f)
{
    uint rev_f = 0;
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        var stat = feature_stat(f, i);
        if (stat == 1 || stat == 2)
        {
            set_feature_stat(ref rev_f, i, 3 - stat);
        }
        else
        {
            assert(stat == 0, "bug");
        }
    }
    assert(std_feature(ref rev_f), "bug");
    return rev_f;
}

String format_feature(uint f)
{
    String s = "Feature[";
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        if (i != 0)
        {
            s = s.concat(",");
        }
        s = s.concat("%s".(feature_stat(f, i)));
    }
    return s.concat("]");
}

class FeatureInfo
{
    FeatureInfo(uint[] step_2_count)
    {
        assert(step_2_count.size() == 6, "bug");
        this.step_2_count = step_2_count;
        this.score_factor = 0.0;
        double factor = 1.0;
        for (int i = 0; i < 6; ++ i)
        {
            if (i == 0)
            {
                this.score_factor += factor * (double)this.step_2_count[i] * 1e10;
            }
            else
            {
                this.score_factor += factor * (double)this.step_2_count[i];
            }
            factor /= 16.0;
        }
    }

    uint[] step_2_count;
    double score_factor;
}

util.HashMap<uint, FeatureInfo> feature_info_map;
util.HashMap<uint, double> weight_map;
double[] score_map;

FeatureInfo calc_feature_info(uint f)
{
    var it = feature_info_map.find(f);
    if (it !== nil)
    {
        return it.value();
    }

    var step_2_count = new uint[6];

    //判断是否已经五联了
    uint continue_count = 0;
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        if (feature_stat(f, i) == 2)
        {
            ++ continue_count;
            if (continue_count >= 5)
            {
                break;
            }
        }
        else
        {
            continue_count = 0;
        }
    }
    if (continue_count >= 5)
    {
        //存在五联，结束
        step_2_count[0] = 1;
    }
    else
    {
        //不存在，对所有空位依次下子并进行dfs来计算step_2_count
        for (uint i = 0; i < FEATURE_LEN; ++ i)
        {
            if (feature_stat(f, i) == 0)
            {
                uint new_f = f;
                set_feature_stat(ref new_f, i, 2);
                assert(std_feature(ref new_f), "bug");
                var feature_info = calc_feature_info(new_f);
                for (uint step = 1; step < 6; ++ step)
                {
                    step_2_count[step] += feature_info.step_2_count[step - 1];
                }
            }
        }
    }

    var r = new FeatureInfo(step_2_count);
    feature_info_map.set(f, r);
    return r;
}

final Pair<uint, double>[] RECOMMEND_WEIGHT = new Pair<uint, double>[]{
    0:    1.5474801146119816,
    1:    10.16533508569475,
    2:    3.650818057044006,
    8:    16.47069236877862,
    9:    12.689845706479675,
    10:   2.2331770796176245,
    32:   1.298469198545945,
    33:   1.9307389424713919,
    34:   3.8532532694349393,
    40:   6.622122379742787,
    41:   1.1756693419235535,
    42:   4.307541939786793,
    129:  2.2394584252804286,
    130:  1.9733797931531782,
    136:  16.82302283370163,
    137:  2.875604095603457,
    138:  2.0680062929793395,
    160:  15.294527376030732,
    161:  9.064315220765879,
    162:  13.738089992084532,
    168:  16.541498285812597,
    169:  14.107626946110058,
    170:  13.06575808980043,
    513:  11.596066576058462,
    514:  2.1983935316621483,
    520:  1.0191000060074131,
    521:  1.189229793764513,
    522:  7.163041798535743,
    545:  1.6654718486492694,
    546:  1.5503202048762514,
    552:  5.209760123110665,
    553:  8.465456142955682,
    554:  10.263322433295263,
    641:  6.112281740269558,
    642:  9.67367737062331,
    649:  11.888650628656073,
    650:  4.062629612280101,
    673:  5.132416856871612,
    674:  6.139143811500937,
    680:  12.76484545157212,
    681:  5.305794171555448,
    682:  13.147463620853486,
    1026: 14.412877905876186,
    1034: 11.505323836427412,
    1058: 1.1690293026697274,
    1066: 1.8997929890865644,
    1154: 5.115437897810927,
    1162: 1.2177970859114886,
    1186: 1.154461937810946,
    1194: 1.8242003360335992,
    1538: 2.529754541491764,
    1546: 1.1165625843632154,
    1570: 8.018820650751538,
    1578: 3.6238367468352393,
    1666: 10.573132157112349,
    1674: 1.0809765091223775,
    1698: 1.2101333813999313,
    1706: 4.933542261314519,
    2050: 3.8593810325711666,
    2058: 5.057272658511261,
    2082: 11.237031512375145,
    2090: 9.668806446878191,
    2186: 10.779040571023558,
    2210: 6.494764918106625,
    2218: 14.838228767457315,
    2570: 7.9151186760090795,
    2602: 1.0557192686423063,
    2730: 14.695574252709536,
};

final bool NO_SCORE_FACTOR = false;

public void init_ai_model()
{
    assert(FEATURE_LEN > 5, "bug"); //限制一下特征长度，需要比5大

    feature_info_map = new util.HashMap<uint, FeatureInfo>(nil);
    weight_map = new util.HashMap<uint, double>(nil);
    score_map = new double[1 << (2 * FEATURE_LEN)];

    uint feature_count = 1U << (2 * FEATURE_LEN);
    for (uint fi = 0; fi < feature_count; ++ fi)
    {
        uint f = fi;
        if (std_feature(ref f))
        {
            calc_feature_info(f);
        }
    }
    var zero_score_factor_feature_list = new util.Vector<uint>(nil);
    foreach (var kv: feature_info_map.iter())
    {
        if (kv.second.score_factor == 0.0)
        {
            zero_score_factor_feature_list.add(kv.first);
        }
    }
    foreach (var f: zero_score_factor_feature_list.iter())
    {
        feature_info_map.pop(f);
    }
    if (NO_SCORE_FACTOR)
    {
        foreach (var kv: feature_info_map.iter())
        {
            kv.second.score_factor = 1.0;
        }
    }
    foreach (var kv: feature_info_map.iter())
    {
        weight_map.set(kv.first, 1);
    }
    weight_map.update(RECOMMEND_WEIGHT.iter());
    foreach (var kv: feature_info_map.iter())
    {
        score_map[kv.first] = kv.second.score_factor * weight_map.get(kv.first);
    }
}

double feature_score(uint f)
{
    //分别计算我方和对方的分值，返回分值差
    return score_map[f] - score_map[rev_feature(f)];
}

uint line_to_feature(char[] line)
{
    assert(line.size() == (long)FEATURE_LEN, "bug");
    uint f = 0;
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        set_feature_stat(ref f, i, (uint)line[i]);
    }
    assert(std_feature(ref f), "bug");
    return f;
}
