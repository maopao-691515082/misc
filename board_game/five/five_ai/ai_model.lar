import util;

//feature按每2bit表示一个位置状态，例如“oo x o”表示为0b101000010010
final uint FEATURE_LEN = 6;

uint feature_stat(uint f, uint i)
{
    assert(i < FEATURE_LEN, "bug");
    return (f >> (i * 2)) & 0b11;
}

void set_feature_stat(ref uint f, uint i, uint stat)
{
    assert(feature_stat(f, i) == 0 && stat <= 2, "bug");
    f |= stat << (i * 2);
}

bool std_feature(ref uint f)
{
    uint rf = 0;
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        var stat = feature_stat(f, i);
        if (stat == 3)
        {
            return false;
        }
        set_feature_stat(ref rf, FEATURE_LEN - 1 - i, stat);
    }
    f = util.min(f, rf);
    return true;
}

//反转feature的双方棋子
uint rev_feature(uint f)
{
    uint rev_f = 0;
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        var stat = feature_stat(f, i);
        if (stat == 1 || stat == 2)
        {
            set_feature_stat(ref rev_f, i, 3 - stat);
        }
        else
        {
            assert(stat == 0, "bug");
        }
    }
    assert(std_feature(ref rev_f), "bug");
    return rev_f;
}

String format_feature(uint f)
{
    String s = "Feature[";
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        if (i != 0)
        {
            s = s.concat(",");
        }
        s = s.concat("%s".(feature_stat(f, i)));
    }
    return s.concat("]");
}

class FeatureInfo
{
    FeatureInfo(uint[] step_2_count)
    {
        assert(step_2_count.size() == 6, "bug");
        this.step_2_count = step_2_count;
        this.score_factor = 0.0;
        double factor = 1.0;
        for (int i = 0; i < 6; ++ i)
        {
            this.score_factor += factor * (double)this.step_2_count[i];
            factor /= 8.0;
        }
    }

    uint[] step_2_count;
    double score_factor;
}

util.HashMap<uint, FeatureInfo> feature_info_map;
util.HashMap<uint, double> weight_map;
util.HashMap<uint, double> score_map;

FeatureInfo calc_feature_info(uint f)
{
    var it = feature_info_map.find(f);
    if (it != nil)
    {
        return it.value();
    }

    var step_2_count = new uint[6];

    //判断是否已经五联了
    uint continue_count = 0;
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        if (feature_stat(f, i) == 2)
        {
            ++ continue_count;
            if (continue_count >= 5)
            {
                break;
            }
        }
        else
        {
            continue_count = 0;
        }
    }
    if (continue_count >= 5)
    {
        //存在五联，结束
        step_2_count[0] = 1;
    }
    else
    {
        //不存在，对所有空位依次下子并进行dfs来计算step_2_count
        for (uint i = 0; i < FEATURE_LEN; ++ i)
        {
            if (feature_stat(f, i) == 0)
            {
                uint new_f = f;
                set_feature_stat(ref new_f, i, 2);
                assert(std_feature(ref new_f), "bug");
                var feature_info = calc_feature_info(new_f);
                for (uint step = 1; step < 6; ++ step)
                {
                    step_2_count[step] += feature_info.step_2_count[step - 1];
                }
            }
        }
    }

    var r = new FeatureInfo(step_2_count);
    feature_info_map.set(f, r);
    return r;
}

final Pair<uint, double>[] RECOMMEND_WEIGHT = new Pair<uint, double>[]{
    0:    1.151097274098761,
    1:    1.399427178242505,
    2:    1.816951725203807,
    8:    1.249275115787615,
    9:    1.110704267373053,
    10:   1.245848696580813,
    32:   1.113916499685034,
    33:   1.202895435242386,
    34:   2.691017476585814,
    40:   1.460780061351004,
    41:   1.842415334389584,
    42:   2.569495064359358,
    129:  2.591838004207255,
    130:  1.449725056346926,
    136:  1.459774798478131,
    137:  1.597098599613524,
    138:  1.553660277443299,
    160:  2.598179770922264,
    161:  1.321635102990819,
    162:  2.225816125358248,
    168:  1.420231210885484,
    169:  1.195032601240681,
    170:  1.203456472718436,
    513:  1.214801240536415,
    514:  1.635284697417510,
    520:  1.935823140047559,
    521:  1.451251649463194,
    522:  1.806047641695568,
    545:  1.808264884298609,
    546:  1.422450282083283,
    552:  1.295811527651134,
    553:  1.500131215447167,
    554:  1.128012833616689,
    641:  2.2472241748248,
    642:  2.096885641777270,
    649:  1.176706608931675,
    650:  2.292517034239019,
    673:  2.379558461092912,
    674:  1.073672595519739,
    680:  2.681312915459936,
    681:  1.488673944147566,
    682:  1.493569584828378,
    1026: 1.783483687383609,
    1034: 1.186698212285344,
    1058: 1.009215308271430,
    1066: 1.068379262376638,
    1154: 2.221349426520255,
    1162: 1.089611645937199,
    1186: 1.310473609139226,
    1194: 1.235395473496998,
    1538: 1.571036171844253,
    1546: 1.184037736834082,
    1570: 1.829138665242595,
    1578: 1.443625644971804,
    1666: 1.345056914559166,
    1674: 1.875943519372505,
    1698: 1.190396042768460,
    1706: 1.149825334138275,
    2050: 2.440012338173774,
    2058: 1.212719151484384,
    2082: 1.810715298359371,
    2090: 1.004936083492559,
    2186: 1.897095694938384,
    2210: 2.292345256722710,
    2218: 2.001851542401147,
    2570: 1.834019550708175,
    2602: 1.513925286552895,
    2730: 1.834058214070996,
};

public void init_ai_model()
{
    assert(FEATURE_LEN > 5, "bug"); //限制一下特征长度，需要比5大

    feature_info_map = new util.HashMap<uint, FeatureInfo>(nil);
    weight_map = new util.HashMap<uint, double>(nil);
    score_map = new util.HashMap<uint, double>(nil);

    uint feature_count = 1U << (2 * FEATURE_LEN);
    for (uint fi = 0; fi < feature_count; ++ fi)
    {
        uint f = fi;
        if (std_feature(ref f))
        {
            calc_feature_info(f);
        }
    }
    var zero_score_factor_feature_list = new util.Vector<uint>(nil);
    foreach (var kv: feature_info_map.iter())
    {
        if (kv.second.score_factor == 0.0)
        {
            zero_score_factor_feature_list.add(kv.first);
        }
    }
    foreach (var f: zero_score_factor_feature_list.iter())
    {
        feature_info_map.pop(f);
    }
    foreach (var kv: feature_info_map.iter())
    {
        weight_map.set(kv.first, 1);
    }
    weight_map.update(RECOMMEND_WEIGHT.iter());
    foreach (var kv: feature_info_map.iter())
    {
        score_map.set(kv.first, kv.second.score_factor * weight_map.get(kv.first));
    }
}

double feature_score(uint f)
{
    //分别计算我方和对方的分值，返回分值差
    double my_score = 0.0, opp_score = 0.0;
    var it = score_map.find(f);
    if (it != nil)
    {
        my_score = it.value();
    }
    it = score_map.find(rev_feature(f));
    if (it != nil)
    {
        opp_score = it.value();
    }
    return my_score - opp_score;
}

uint line_to_feature(char[] line)
{
    assert(line.size() == (long)FEATURE_LEN, "bug");
    uint f = 0;
    for (uint i = 0; i < FEATURE_LEN; ++ i)
    {
        set_feature_stat(ref f, i, (uint)line[i]);
    }
    assert(std_feature(ref f), "bug");
    return f;
}
