import util, math/rand, math, io/bufio, time, os;
import ../five_ai;

final int PLAYER_COUNT = 10;
final int SET_COUNT = 2;
final long BOARD_SIZE = 15;
final long CELL_COUNT = BOARD_SIZE * BOARD_SIZE;

util.Vector<uint> feature_list;

class Player
{
    Player(int idx)
    {
        this.idx = idx;
        this.weight_map = new util.HashMap<uint, double>(nil);
        foreach (var f: feature_list.iter())
        {
            this.weight_map.set(f, math.exp(rand.random() * 3));
        }
        this.score = 0;
    }

    int idx;
    util.HashMap<uint, double> weight_map;
    int score;
}

Player[] player_list;

bool check_winner(char[] line, char win_stat, Player p)
{
    var stat = line[0];
    for (int i = 1; i < 5; ++ i)
    {
        if (stat != line[i])
        {
            return false;
        }
    }
    if (stat == 0)
    {
        return false;
    }
    assert(stat == win_stat, "bug");
    p.score += 2;
    println("#%s win".(p.idx));
    return true;
}

bool check_over(char[][] board, Player p, char win_stat)
{
    var line = new char[5];

    for (long row = 0; row < BOARD_SIZE; ++ row)
    {
        for (long col = 0; col < BOARD_SIZE; ++ col)
        {
            if (col + 5 <= BOARD_SIZE)
            {
                for (long i = 0; i < 5; ++ i)
                {
                    line[i] = board[row][col + i];
                }
                if (check_winner(line, win_stat, p))
                {
                    return true;
                }
            }

            if (row + 5 <= BOARD_SIZE)
            {
                for (long i = 0; i < 5; ++ i)
                {
                    line[i] = board[row + i][col];
                }
                if (check_winner(line, win_stat, p))
                {
                    return true;
                }
            }

            if (row + 5 <= BOARD_SIZE && col + 5 <= BOARD_SIZE)
            {
                for (long i = 0; i < 5; ++ i)
                {
                    line[i] = board[row + i][col + i];
                }
                if (check_winner(line, win_stat, p))
                {
                    return true;
                }
            }

            if (row + 5 <= BOARD_SIZE && col >= 4)
            {
                for (long i = 0; i < 5; ++ i)
                {
                    line[i] = board[row + i][col - i];
                }
                if (check_winner(line, win_stat, p))
                {
                    return true;
                }
            }
        }
    }

    return false;
}

void pk_one_set(Player x, Player y)
{
    var board = new char[BOARD_SIZE][BOARD_SIZE];
    long cell_count = 0;
    while (true)
    {
        long row, col;

        //x执黑
        five_ai.train_ai_choice(board, 1, ref row, ref col);
        assert(board[row][col] == 0, "bug");
        board[row][col] = 1;
        ++ cell_count;
        assert(cell_count <= CELL_COUNT, "bug");
        if (cell_count == CELL_COUNT)
        {
            ++ x.score;
            ++ y.score;
            println("draw");
            break;
        }
        if (check_over(board, x, 1))
        {
            break;
        }

        //y执白
        five_ai.train_ai_choice(board, 2, ref row, ref col);
        assert(board[row][col] == 0, "bug");
        board[row][col] = 2;
        ++ cell_count;
        assert(cell_count <= CELL_COUNT, "bug");
        if (cell_count == CELL_COUNT)
        {
            ++ x.score;
            ++ y.score;
            println("draw");
            break;
        }
        if (check_over(board, y, 2))
        {
            break;
        }
    }
}

void pk(Player a, Player b)
{
    //双方各自执黑进行SET_COUNT次对局

    five_ai.train_init_player(a.weight_map, b.weight_map);
    for (int i = 0; i < SET_COUNT; ++ i)
    {
        pk_one_set(a, b);
    }

    five_ai.train_init_player(b.weight_map, a.weight_map);
    for (int i = 0; i < SET_COUNT; ++ i)
    {
        pk_one_set(b, a);
    }
}

void output_result()
{
    var out_file = new bufio.File("result_%s.%s".((long)(time.time() * 1000000.0), os.pid()), "w");
    defer out_file.close();

    foreach (var p: player_list.iter())
    {
        out_file.write_line("#%s: %s".(p.idx, p.score));
        foreach (var kv: p.weight_map.iter())
        {
            out_file.write_line("%s\t%s".(kv.first, kv.second));
        }
        out_file.write_line("");
    }
}

void match()
{
    for (int i = 0; i < PLAYER_COUNT; ++ i)
    {
        var pi = player_list[i];
        for (int j = i + 1; j < PLAYER_COUNT; ++ j)
        {
            var pj = player_list[j];
            println("#%s[%s] vs #%s[%s]".(pi.idx, i, pj.idx, j));
            pk(pi, pj);
        }
    }

    output_result();
}

Player[] reserve_best(int count)
{
    //按score从大到小取出前count个player进入下一轮
    var new_player_list = new Player[PLAYER_COUNT];

    for (int i = 0; i < count; ++ i)
    {
        int best_player_idx = i;
        for (int j = i + 1; j < PLAYER_COUNT; ++ j)
        {
            if (player_list[j].score > player_list[best_player_idx].score)
            {
                best_player_idx = j;
            }
        }
        var tmp = player_list[i];
        player_list[i] = player_list[best_player_idx];
        player_list[best_player_idx] = tmp;

        //进入下一轮并清空积分
        new_player_list[i] = player_list[i];
        new_player_list[i].score = 0;
    }

    return new_player_list;
}

void random_train()
{
    player_list = new Player[PLAYER_COUNT];
    for (int i = 0; i < PLAYER_COUNT; ++ i)
    {
        player_list[i] = new Player(i);
    }
    int next_idx = PLAYER_COUNT;

    while (true)
    {
        match();

        //按score从大到小取出前三分之一player进入下一轮
        var new_player_list = reserve_best(PLAYER_COUNT / 3);

        //随机生成剩余player
        for (int i = PLAYER_COUNT / 3; i < PLAYER_COUNT; ++ i)
        {
            new_player_list[i] = new Player(next_idx);
            ++ next_idx;
        }

        //开始下一轮比赛
        player_list = new_player_list;
    }
}

void load_best_ai(String fn)
{
    var best_ai_file = new bufio.File(fn, "r");
    defer best_ai_file.close();

    for (int i = 0; i < PLAYER_COUNT; ++ i)
    {
        var p = new Player(i);
        if (best_ai_file.read_line() !== nil)
        {
            for (long j = 0; j < feature_list.size(); ++ j)
            {
                var sl = best_ai_file.read_line().split(nil, -1L);
                assert(sl.size() == 2, "bug");
                var f = (uint)sl[0].parse_long(0);
                var sv = sl[1].parse_double();
                p.weight_map.set(f, sv);
            }
            var empty_line = best_ai_file.read_line();
            assert(empty_line.eq("\n"), "bug");
        }
        player_list[i] = p;
    }
}

Player mutate(Player p, int idx)
{
    //变异过程，从原player生成新的，随机改变其中10%的weight（实现上是生成新player并随机继承90%的weight）
    var new_p = new Player(idx);
    rand.shuffle(feature_list);
    for (long i = 0; i < feature_list.size() * 9 / 10; ++ i)
    {
        uint f = feature_list.get(i);
        new_p.weight_map.set(f, p.weight_map.get(f));
    }
    return new_p;
}

Player breed(Player a, Player b, int idx)
{
    //繁殖过程，从a和b随机取一半weight给新player
    var new_p = new Player(idx);
    rand.shuffle(feature_list);
    for (long i = 0; i < feature_list.size(); ++ i)
    {
        var src = a;
        if (i % 2 == 0)
        {
            src = b;
        }
        uint f = feature_list.get(i);
        new_p.weight_map.set(f, src.weight_map.get(f));
    }
    return new_p;
}

void gene_train(int reserve_count)
{
    player_list = new Player[PLAYER_COUNT];

    load_best_ai("random_train_best_ai");
    int next_idx = PLAYER_COUNT;

    while (true)
    {
        match();

        //按score从大到小取出前一半player进入下一轮
        var new_player_list = reserve_best(reserve_count);

        //通过遗传杂交或变异生成剩余一半player
        for (int i = reserve_count; i < PLAYER_COUNT; ++ i)
        {
            var a = player_list[rand.rand_n((long)reserve_count)],
                b = player_list[rand.rand_n((long)reserve_count)];
            if (a === b)
            {
                new_player_list[i] = mutate(a, next_idx);
            }
            else
            {
                new_player_list[i] = breed(a, b, next_idx);
            }
            ++ next_idx;
        }

        //开始下一轮比赛
        player_list = new_player_list;
    }
}

void last_train()
{
    player_list = new Player[PLAYER_COUNT];

    load_best_ai("gene_train_best_ai");

    while (true)
    {
        match();

        //清空score，反复进行比赛
        foreach (var p: player_list.iter())
        {
            p.score = 0;
        }
    }
}

public void main()
{
    five_ai.init_ai_model();
    feature_list = five_ai.train_get_feature_list();

    if (os.args[1].eq("random"))
    {
        random_train();
    }
    else if (os.args[1].eq("gene"))
    {
        gene_train(PLAYER_COUNT / 5);
    }
    else if (os.args[1].eq("last"))
    {
        last_train();
    }
}
